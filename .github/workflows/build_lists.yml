name: Build lists
run-name: Build lists
on:
  workflow_dispatch:
  push:
    paths:
      - "data/raw.txt"
  schedule:
    # Daily at 4:50am (GMT+8)
    - cron: '50 20 * * *'

jobs:
  build-lists:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Provide Git identity
        run: |
          git config user.email '${{ vars.GIT_EMAIL }}'
          git config user.name '${{ vars.GIT_USERNAME }}'

      - name: Empty line check
        if: success() || failure()
        run: |
          if grep -q '^[[:space:]]*$' "${{ vars.RAW_FILE }}"; then
            echo -e "\nEmpty lines found. Removing..."           

            awk NF "${{ vars.RAW_FILE }}" > raw.tmp
            mv raw.tmp "${{ vars.RAW_FILE }}"

            echo
            exit 1
          fi

      - name: Case check
        if: success() || failure()
        run: |
          > check.tmp
          grep '[A-Z]' "${{ vars.RAW_FILE }}" > check.tmp || true

          if [[ -s check.tmp ]]; then
            echo -e "\nEntries with capitalized letters found:"
            cat check.tmp

            tr '[:upper:]' '[:lower:]' < "${{ vars.RAW_FILE }}" > raw.tmp
            mv raw.tmp "${{ vars.RAW_FILE }}"

            echo
            exit 1
          fi

      - name: Duplicate check
        if: success() || failure()
        run: |
          > check.tmp
          sort "${{ vars.RAW_FILE }}" | uniq -d > check.tmp

          if [[ -s check.tmp ]]; then
            echo -e "\nDuplicates found:"
            cat check.tmp

            sort -u "${{ vars.RAW_FILE }}" -o "${{ vars.RAW_FILE }}"

            echo
            exit 1
          fi

      - name: Whitelisted TLDs check
        if: success() || failure()
        run: |
          > check.tmp
          grep -E '\.(gov|edu)(\.[a-z]{2})?$' "${{ vars.RAW_FILE }}" > check.tmp || true

          if [[ -s check.tmp ]]; then
            echo -e "\nDomains with whitelisted TLDs found:"
            cat check.tmp

            comm -23 "${{ vars.RAW_FILE }}" check.tmp > raw.tmp
            mv raw.tmp "${{ vars.RAW_FILE }}"

            echo
            exit 1
          fi

      - name: Invalid domains check
        if: success() || failure()
        run: |
          > check.tmp
          grep -vE '^[[:alnum:].-]+\.[[:alnum:]-]{2,}$' "${{ vars.RAW_FILE }}" > check.tmp || true
         
          if [[ -s check.tmp ]]; then
            echo -e "\nInvalid domains found:"
            cat check.tmp

            comm -23 "${{ vars.RAW_FILE }}" check.tmp > raw.tmp
            mv raw.tmp "${{ vars.RAW_FILE }}"

            echo
            exit 1
          fi

      - name: Whitelist check
        id: whitelist
        if: success() || failure()
        run: |
          > check.tmp
          grep -Ff "${{ vars.WHITELIST_FILE }}" "${{ vars.RAW_FILE }}" | grep -vxFf "${{ vars.BLACKLIST_FILE }}" > check.tmp || true
          
          if [[ -s check.tmp ]]; then
            echo -e "\nWhitelisted domains found:"
            cat check.tmp

            echo -e "\nSkipping lists build.\n"
            exit 1
          fi

      - name: Toplist check
        id: toplist
        if: success() || failure()
        run: |
          > check.tmp
          comm -12 "${{ vars.RAW_FILE }}" "${{ vars.TOPLIST_FILE }}" | grep -vxFf "${{ vars.BLACKLIST_FILE }}" > check.tmp || true

          if [[ -s check.tmp ]]; then
            echo -e "\nDomains found in the toplist:"
            cat check.tmp

            echo -e "\nSkipping lists build.\n"
            exit 1
          fi

      - name: Build Domains list
        id: build_domains
        if: steps.whitelist.conclusion == 'success' && steps.toplist.conclusion == 'success'
        run: |
          bash "workflow_scripts/build_domains.sh"

      - name: Build Adblock Plus list
        id: build_adblock
        if: steps.whitelist.conclusion == 'success' && steps.toplist.conclusion == 'success'
        run: |
          bash "workflow_scripts/build_adblock.sh"
          git add "${{ vars.COMPRESSED_ENTRIES_FILE }}"
          git diff-index --quiet HEAD || git commit -m "Compress Adblock rules"

      - name: Update stats
        if: steps.build_domains.conclusion == 'success' && steps.build_adblock.conclusion == 'success'
        run: |
          domains_count=$(grep -vE '^(#|$)' "${{ vars.DOMAINS_FILE }}" | wc -l)
          adblock_count=$(grep -vE '^(!|$)' "${{ vars.ADBLOCK_FILE }}" | wc -l)
          sed -i 's/domains_count/'"$domains_count"'/g' "${{ vars.README_TEMPLATE }}"
          sed -i 's/adblock_count/'"$adblock_count"'/g' "${{ vars.README_TEMPLATE }}"

          todays_date=$(date -u +"%m%d%y")
          date_in_file=$(sed -n '2p' "${{ vars.STATS_FILE }}")
          current_count="$adblock_count"
          yest_count=$(sed -n '6p' "${{ vars.STATS_FILE }}")

          if [[ "$date_in_file" == "$todays_date" ]]; then
            todays_diff=$((current_count - yest_count))

            sed -i 's/todays_count/'"$todays_diff"'/g' "${{ vars.README_TEMPLATE }}"

            yest_diff=$(sed -n '8p' "${{ vars.STATS_FILE }}")

            sed -i 's/yest_count/'"$yest_diff"'/g' "${{ vars.README_TEMPLATE }}"
          else
            end_of_day_count=$(sed -n '4p' "${{ vars.STATS_FILE }}")

            end_of_day_diff=$((end_of_day_count - yest_count))

            sed -i 's/yest_count/'"$end_of_day_diff"'/g' "${{ vars.README_TEMPLATE }}"
    
            todays_diff=$((current_count - end_of_day_count))

            sed -i 's/todays_count/'"$todays_diff"'/g' "${{ vars.README_TEMPLATE }}"

            sed -i "2s/.*/${todays_date}/" "${{ vars.STATS_FILE }}"

            sed -i "6s/.*/${end_of_day_count}/" "${{ vars.STATS_FILE }}"

            sed -i "8s/.*/${current_count}/" "${{ vars.STATS_FILE }}"
          fi

          sed -i "4s/.*/${current_count}/" "${{ vars.STATS_FILE }}"
       
          while read -r subdomain; do
            grep "^$subdomain\." "${{ vars.DEAD_DOMAINS_FILE }}" >> subdomains.tmp
          done < "${{ vars.SUBDOMAINS_FILE }}"

          comm -23 "${{ vars.DEAD_DOMAINS_FILE }}" subdomains.tmp > dead_domains.tmp || true

          dead_domains_count=$(wc -l < dead_domains.tmp)

          total_count=$((dead_domains_count + current_count))

          sed -i 's/total_count/'"$total_count"'/g' "${{ vars.README_TEMPLATE }}"

          sed -i 's/update_time/'"$(date -u +"%a %b %d %H:%M UTC")"'/g' "${{ vars.README_TEMPLATE }}"

          cp "${{ vars.README_TEMPLATE }}" "${{ vars.README }}"

          git restore "${{ vars.README_TEMPLATE }}"
          git add "${{ vars.README }}" "${{ vars.STATS_FILE }}"
          git diff-index --quiet HEAD || git commit -m "Update README"

      - name: Commit and push
        if: steps.build_domains.conclusion == 'success' && steps.build_adblock.conclusion == 'success'
        run: |
          git add "${{ vars.DOMAINS_FILE }}" "${{ vars.ADBLOCK_FILE }}"
          git diff-index --quiet HEAD || git commit -m "Build lists"
          git push

