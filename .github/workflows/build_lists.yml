name: Build lists
run-name: Build lists
on:
  workflow_dispatch:
  push:
    paths:
      - "data/raw.txt"
      - "data/README.md"
  schedule:
    # Daily at 5:10am (GMT+8)
    - cron: '10 21 * * *'

jobs:
  build-lists:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Provide Git identity
        run: |
          git config user.email '${{ vars.GIT_EMAIL }}'
          git config user.name '${{ vars.GIT_USERNAME }}'

      - name: Empty line check
        if: success() || failure()
        run: |
          grep -q '^[[:space:]]*$' "${{ vars.RAW_FILE }}" || exit 0

          echo -e "\nEmpty lines found. Removing..."           

          awk NF "${{ vars.RAW_FILE }}" > raw.tmp
          mv raw.tmp "${{ vars.RAW_FILE }}"

          echo
          exit 1

      - name: Case check
        if: success() || failure()
        run: |
          grep '[A-Z]' "${{ vars.RAW_FILE }}" > check.tmp || exit 0

          echo -e "\nEntries with capitalized letters found:"
          cat check.tmp

          tr '[:upper:]' '[:lower:]' < "${{ vars.RAW_FILE }}" > raw.tmp
          mv raw.tmp "${{ vars.RAW_FILE }}"

          echo -e "\nRemoving...\n"
          exit 1

      - name: Duplicate check
        if: success() || failure()
        run: |
          sort "${{ vars.RAW_FILE }}" | uniq -d > check.tmp

          [[ -s check.tmp ]] || exit 0
          echo -e "\nDuplicates found:"
          cat check.tmp

          sort -u "${{ vars.RAW_FILE }}" -o "${{ vars.RAW_FILE }}"

          echo -e "\nRemoving...\n"
          exit 1

      - name: Whitelisted TLDs check
        if: success() || failure()
        run: |
          grep -E '\.(gov|edu)(\.[a-z]{2})?$' "${{ vars.RAW_FILE }}" > check.tmp || exit 0

          echo -e "\nDomains with whitelisted TLDs found:"
          cat check.tmp

          comm -23 "${{ vars.RAW_FILE }}" check.tmp > raw.tmp
          mv raw.tmp "${{ vars.RAW_FILE }}"

          echo -e "\nRemoving...\n"
          exit 1

      - name: Invalid domains check
        if: success() || failure()
        run: |
          grep -vE '^[[:alnum:].-]+\.[[:alnum:]-]{2,}$' "${{ vars.RAW_FILE }}" > check.tmp || exit 0
         
          echo -e "\nInvalid domains found:"
          cat check.tmp

          comm -23 "${{ vars.RAW_FILE }}" check.tmp > raw.tmp
          mv raw.tmp "${{ vars.RAW_FILE }}"

          echo -e "\nRemoving...\n"
          exit 1

      - name: Whitelist check
        id: whitelist
        if: success() || failure()
        run: |
          grep -Ff "${{ vars.WHITELIST_FILE }}" "${{ vars.RAW_FILE }}" \
            | grep -vxFf "${{ vars.BLACKLIST_FILE }}" > check.tmp || exit 0
          
          echo -e "\nWhitelisted domains found:"
          cat check.tmp

          echo -e "\nSkipping build steps.\n"
          exit 1

      - name: Save any new filtering changes
        if: failure()
        run: |
          git add "${{ vars.RAW_FILE }}"
          git commit -m "Filter raw file"

      - name: Build Domains list
        id: build_domains
        if: success() || steps.whitelist.conclusion == 'success'
        run: |
          bash "workflow_scripts/build_domains.sh"

      - name: Build Adblock Plus list
        id: build_adblock
        if: success() || steps.whitelist.conclusion == 'success'
        run: |
          bash "workflow_scripts/build_adblock.sh"
          git add "${{ vars.COMPRESSED_ENTRIES_FILE }}"
          git diff-index --quiet HEAD || git commit -m "Compress Adblock rules"

      - name: Update stats
        if: success() || steps.build_domains.conclusion == 'success' && steps.build_adblock.conclusion == 'success'
        run: |
          domains_count=$(grep -cvE '^(#|$)' "${{ vars.DOMAINS_FILE }}")
          adblock_count=$(grep -cvE '^(!|$)' "${{ vars.ADBLOCK_FILE }}")
          sed -i "s/domains_count/${domains_count}/g" "${{ vars.README_TEMPLATE }}"
          sed -i "s/adblock_count/${adblock_count}/g" "${{ vars.README_TEMPLATE }}"

          todays_date=$(date -u +"%m%d%y")
          date_in_file=$(sed -n '2p' "${{ vars.STATS_FILE }}")
          current_count="$adblock_count"
          yest_count=$(sed -n '6p' "${{ vars.STATS_FILE }}")

          if [[ "$date_in_file" == "$todays_date" ]]; then
            todays_diff=$((current_count - yest_count))

            sed -i "s/todays_count/${todays_diff}/g" "${{ vars.README_TEMPLATE }}"

            yest_diff=$(sed -n '8p' "${{ vars.STATS_FILE }}")

            sed -i "s/yest_count/${yest_diff}/g" "${{ vars.README_TEMPLATE }}"
          else
            end_of_day_count=$(sed -n '4p' "${{ vars.STATS_FILE }}")

            end_of_day_diff=$((end_of_day_count - yest_count))

            sed -i "s/yest_count/${end_of_day_diff}/g" "${{ vars.README_TEMPLATE }}"
    
            todays_diff=$((current_count - end_of_day_count))

            sed -i "s/todays_count/${todays_diff}/g" "${{ vars.README_TEMPLATE }}"

            sed -i "2s/.*/${todays_date}/" "${{ vars.STATS_FILE }}"

            sed -i "6s/.*/${end_of_day_count}/" "${{ vars.STATS_FILE }}"

            sed -i "8s/.*/${end_of_day_diff}/" "${{ vars.STATS_FILE }}"
          fi

          sed -i "4s/.*/${current_count}/" "${{ vars.STATS_FILE }}"
       
          while read -r subdomain; do
            grep "^${subdomain}\." "${{ vars.DEAD_DOMAINS_FILE }}" >> subdomains.tmp || true
          done < "${{ vars.SUBDOMAINS_FILE }}"

          comm -23 "${{ vars.DEAD_DOMAINS_FILE }}" subdomains.tmp > dead_domains.tmp

          dead_domains_count=$(wc -l < dead_domains.tmp)

          total_count=$((dead_domains_count + current_count))

          sed -i "s/total_count/${total_count}/g" "${{ vars.README_TEMPLATE }}"

          auto_count=$(sed -n '10p' "${{ vars.STATS_FILE }}")

          manual_count=$((total_count - auto_count))

          sed -i "s/auto_count/${auto_count}/g" "${{ vars.README_TEMPLATE }}"

          sed -i "s/manual_count/${manual_count}/g" "${{ vars.README_TEMPLATE }}"
          
          sed -i "s/update_time/$(date -u +"%a %b %d %H:%M UTC")/g" "${{ vars.README_TEMPLATE }}"

          cp "${{ vars.README_TEMPLATE }}" "${{ vars.README }}"

          git add "${{ vars.README }}" "${{ vars.STATS_FILE }}"
          git diff-index --quiet HEAD || git commit -m "Update README/stats"

      - name: Commit and push
        if: success() || steps.build_domains.conclusion == 'success' && steps.build_adblock.conclusion == 'success'
        run: |
          git add "${{ vars.DOMAINS_FILE }}" "${{ vars.ADBLOCK_FILE }}"
          git diff-index --quiet HEAD || git commit -m "Build lists"
          git push

