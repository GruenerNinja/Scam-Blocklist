name: Build lists
run-name: Build lists
on:
  workflow_dispatch:
  push:
    paths:
      - "data/raw.txt"
      - "data/README.md"
  schedule:
    # Daily at 4:40am (GMT+8)
    - cron: '40 20 * * *'

jobs:
  build_lists:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Provide Git identity
        run: |
          git config user.email '${{ vars.GIT_EMAIL }}'
          git config user.name '${{ vars.GIT_USERNAME }}'

      - name: Empty line check
        if: success() || failure()
        run: |
          grep -q '^[[:space:]]*$' "${{ vars.RAW_FILE }}" || exit 0

          echo -e "\nEmpty lines found. Removing..."           

          awk NF "${{ vars.RAW_FILE }}" > raw.tmp
          mv raw.tmp "${{ vars.RAW_FILE }}"

          echo
          exit 1

      - name: Case check
        if: success() || failure()
        run: |
          grep '[A-Z]' "${{ vars.RAW_FILE }}" > check.tmp || exit 0

          echo -e "\nEntries with capitalized letters found:"
          cat check.tmp

          tr '[:upper:]' '[:lower:]' < "${{ vars.RAW_FILE }}" > raw.tmp
          mv raw.tmp "${{ vars.RAW_FILE }}"

          echo -e "\nRemoving...\n"
          exit 1

      - name: Sort check
        if: success() || failure()
        run : |
          sort -c "${{ vars.RAW_FILE }}" && exit 0
          
          echo -e "\nBlocklist is not sorted alphabetically."
          
          sort "${{ vars.RAW_FILE }}" -o "${{ vars.RAW_FILE }}"
          
          echo -e "\nSorting..."
          exit 1

      - name: Duplicate check
        if: success() || failure()
        run: |
          uniq -d "${{ vars.RAW_FILE }}" > check.tmp

          [[ -s check.tmp ]] || exit 0
          echo -e "\nDuplicates found:"
          cat check.tmp

          sort -u "${{ vars.RAW_FILE }}" -o "${{ vars.RAW_FILE }}"

          echo -e "\nRemoving...\n"
          exit 1

      - name: Subdomains check
        if : success() || failure()
        run: |
          > check.tmp
          while read -r subdomain; do
            grep "^${subdomain}\." "${{ vars.RAW_FILE }}" >> check.tmp || true
          done < "${{ vars.SUBDOMAINS_FILE }}"

          [[ -s check.tmp ]] || exit 0
          echo -e "\nEntries with subdomains found:"
          cat check.tmp

          while read -r subdomain; do
            sed -i "s/^${subdomain}\.//" "${{ vars.RAW_FILE }}"
          done < "${{ vars.SUBDOMAINS_FILE }}"

          sort -u "${{ vars.RAW_FILE }}" -o "${{ vars.RAW_FILE }}"

          echo -e "\nRemoving...\n"
          exit 1

      - name: Whitelisted TLDs check
        if: success() || failure()
        run: |
          grep -E '\.(gov|edu)(\.[a-z]{2})?$' "${{ vars.RAW_FILE }}" > check.tmp \
            || exit 0

          echo -e "\nDomains with whitelisted TLDs found:"
          cat check.tmp

          comm -23 "${{ vars.RAW_FILE }}" check.tmp > raw.tmp
          mv raw.tmp "${{ vars.RAW_FILE }}"

          echo -e "\nRemoving...\n"
          exit 1

      - name: Invalid domains check
        if: success() || failure()
        run: |
          grep -vE '^[[:alnum:].-]+\.[[:alnum:]-]{2,}$' "${{ vars.RAW_FILE }}" > check.tmp \
            || exit 0
         
          echo -e "\nInvalid domains found:"
          cat check.tmp

          comm -23 "${{ vars.RAW_FILE }}" check.tmp > raw.tmp
          mv raw.tmp "${{ vars.RAW_FILE }}"

          echo -e "\nRemoving...\n"
          exit 1

      - name: Redundant entries check
        if: success() || failure()
        run: |
          > check.tmp
          while read -r entry; do
            grep "\.${entry}$" "${{ vars.RAW_FILE }}" >> check.tmp \
              && echo "$entry" >> "${{ vars.OPTIMISED_ENTRIES_FILE }}" || true
          done < "${{ vars.RAW_FILE }}"
          
          [[ -s check.tmp ]] || exit 0
          echo -e "\nRedundant entries found:"
          cat check.tmp

          grep -vxFf check.tmp "${{ vars.RAW_FILE }}" > raw.tmp || true
          mv raw.tmp "${{ vars.RAW_FILE }}"
  
          echo -e "\nRemoving...\n"
          exit 1

      - name: Whitelist check
        id: whitelist
        if: success() || failure()
        run: |
          grep -Ff "${{ vars.WHITELIST_FILE }}" "${{ vars.RAW_FILE }}" \
            | grep -vxFf "${{ vars.BLACKLIST_FILE }}" > check.tmp || exit 0
          
          echo -e "\nWhitelisted domains found:"
          cat check.tmp

          echo -e "\nSkipping build steps.\n"
          exit 1

      - name: Commit filtered raw file
        if: success() || failure()
        run: |
          git add "${{ vars.RAW_FILE }}" "${{ vars.OPTIMISED_ENTRIES_FILE }}"
          git diff-index --quiet HEAD || git commit -m "Filter raw file" || true

      - name: Build lists
        id: build_lists
        if: success() || steps.whitelist.conclusion == 'success'
        run: |
          bash "${{ vars.BUILD_SCAMS }}" 'Adblock Plus' '||' '^'
          bash "${{ vars.BUILD_SCAMS }}" 'Wildcard Domains' '' ''
          bash "${{ vars.BUILD_SCAMS }}" 'Wildcard Asterisk' '*.' ''
          bash "${{ vars.BUILD_SCAMS }}" 'Dnsmasq' 'address=/' '/#'
          bash "${{ vars.BUILD_SCAMS }}" 'Unbound' 'local-zone: "' '." always_nxdomain'
          bash "workflow_scripts/build_hosters.sh"

      - name: Update stats
        if: success() || steps.build_lists.conclusion == 'success'
        run: |
          todays_date=$(date -u +"%m%d%y")
          date_in_file=$(sed -n '2p' "${{ vars.STATS_FILE }}")
          current_count=$(wc -l < "${{ vars.RAW_FILE }}")
          yest_count=$(sed -n '6p' "${{ vars.STATS_FILE }}")

          if [[ "$date_in_file" == "$todays_date" ]]; then
            todays_diff=$((current_count - yest_count))

            sed -i "s/todays_count/${todays_diff}/g" "${{ vars.README_TEMPLATE }}"

            yest_diff=$(sed -n '8p' "${{ vars.STATS_FILE }}")

            sed -i "s/yest_count/${yest_diff}/g" "${{ vars.README_TEMPLATE }}"
          else
            end_of_day_count=$(sed -n '4p' "${{ vars.STATS_FILE }}")

            end_of_day_diff=$((end_of_day_count - yest_count))

            sed -i "s/yest_count/${end_of_day_diff}/g" "${{ vars.README_TEMPLATE }}"
    
            todays_diff=$((current_count - end_of_day_count))

            sed -i "s/todays_count/${todays_diff}/g" "${{ vars.README_TEMPLATE }}"

            sed -i "2s/.*/${todays_date}/" "${{ vars.STATS_FILE }}"

            sed -i "6s/.*/${end_of_day_count}/" "${{ vars.STATS_FILE }}"

            sed -i "8s/.*/${end_of_day_diff}/" "${{ vars.STATS_FILE }}"
          fi

          hosters_count=$(wc -l < "${{ vars.OPTIMISED_ENTRIES_FILE }}")

          sed -i "s/hosters_count/${hosters_count}/g" "${{ vars.README_TEMPLATE }}"

          sed -i "4s/.*/${current_count}/" "${{ vars.STATS_FILE }}"

          sed -i "s/alive_count/${current_count}/g" "${{ vars.README_TEMPLATE }}"
          
          dead_domains_count=$(wc -l < "${{ vars.DEAD_DOMAINS_FILE }}")

          total_count=$((dead_domains_count + current_count))

          sed -i "s/total_count/${total_count}/g" "${{ vars.README_TEMPLATE }}"

          auto_count=$(sed -n '10p' "${{ vars.STATS_FILE }}")

          manual_count=$((total_count - auto_count))

          sed -i "s/auto_count/${auto_count}/g" "${{ vars.README_TEMPLATE }}"

          sed -i "s/manual_count/${manual_count}/g" "${{ vars.README_TEMPLATE }}"
          
          sed -i "s/update_time/$(date -u +"%a %b %d %H:%M UTC")/g" "${{ vars.README_TEMPLATE }}"

          cp "${{ vars.README_TEMPLATE }}" "${{ vars.README }}"

          git restore "${{ vars.README_TEMPLATE }}"
          git add "${{ vars.README }}" "${{ vars.STATS_FILE }}"
          git commit -m "Update README/stats"

      - name: Push
        if: success() || steps.build_lists.conclusion == 'success'
        run: git push
